<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\node\NodeInterface;


/**
 * Note: We just want to copy when we actually create new default revisions.
 */
function _content_translation_worklow_is_republished_save(NodeInterface $default_node, NodeInterface $saved_node, NodeInterface $presaved_node) {
  return $default_node->isPublished() && $saved_node->get('moderation_state')->target_id !== $presaved_node->get('moderation_state')->target_id && $saved_node->get('moderation_state')->target_id === 'published';
}

function _content_translation_workflow_copy_revision_data(NodeInterface $from_revision, NodeInterface $to_revision) {
  $entity_type = $from_revision->getEntityType();
  foreach ($from_revision->getFields() as $field_name => $field_item) {
    // These values are not supposed to be changed/copied over.
    $excluded_field_names = [
      $entity_type->getKey('revision'),
      $entity_type->getKey('id'),
      $entity_type->getKey('langcode'),
      $entity_type->getKey('uuid'),
    ];
    if (!in_array($field_name, $excluded_field_names, TRUE)) {
      /** @var \Drupal\Core\Field\FieldItemListInterface $field_item */
      $to_revision->set($field_name, $field_item->getValue());
    }
  }
}

function _content_translation_workflow_load_previous_published_revision_translation(NodeInterface $revision, EntityStorageInterface $node_storage) {
  // When the translation isn't published either, saving the entity
  // would make the translation unpublished. Therefore we have to sync
  // the latest published translation in.

  // First find the latest affected translation, which is published.
  $language = $revision->language();
  $result = $node_storage->getQuery()
    ->allRevisions()
    ->condition('langcode', $language->getId())
    ->condition('revision_translation_affected', TRUE)
    ->condition('moderation_state.target_id', 'published')
    ->condition('nid', $revision->id())
    ->sort('vid', 'DESC')
    ->pager(1)
    ->execute();
  // There might be no published translation yet.
  if (!empty($result)) {
    $revision_id = array_keys($result)[0];

    /** @var \Drupal\node\NodeInterface $node_revision */
    $node_revision = $node_storage->loadRevision($revision_id);

    if ($node_revision->hasTranslation($language->getId())) {
      return $node_revision->getTranslation($language->getId());
    }
  }
}

function content_translation_workflow_entity_presave(EntityInterface $entity) {
  if (!$entity instanceof NodeInterface) {
    return;
  }
  $node = $entity;

  $node_storage = \Drupal::entityTypeManager()->getStorage('node');

  // Ensures to sync over translations to never have an unpublished version.
  /** @var \Drupal\node\NodeInterface $original */
  if ($node->getLoadedRevisionId() && ($original = $node_storage->loadRevision($node->getLoadedRevisionId())) && $original->hasTranslation($node->language()->getId())) {
    $original = $original->getTranslation($node->language()->getId());
    /** @var \Drupal\node\NodeInterface $default_node */
    $default_node = $node_storage->load($node->id())->getTranslation($node->language()->getId());
    if (_content_translation_worklow_is_republished_save($default_node, $node, $original)) {
      $forward_revision = clone $node;
      foreach ($node->getTranslationLanguages() as $language) {
        // Just copy over other translations.
        if ($language->getId() === $node->language()->getId()) {
          continue;
        }

        $translation = $node->getTranslation($language->getId());
        if ($revision_translation = _content_translation_workflow_load_previous_published_revision_translation($translation, $node_storage)) {
          _content_translation_workflow_copy_revision_data($revision_translation, $translation);
        }


        // Now we have synched in the latest published revision.
        // The next problem which appears is that the editor no longer has an
        // idea, what the "latest" revision might be.
        // The workaround applied here is to add another forward revision,
        // which contains the revision we just published, as well as a copy
        // of every other translation.
      }
      $node->setPublished(TRUE);

      $node->contentTranslationWorkflowAdditionalEntity = $forward_revision;
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
/**
 * Implements hook_module_implements_alter().
 */
function content_translation_workflow_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'entity_presave') {
    // Ensure the following order:
    // - content_translation
    // - workbench_moderation
    // - content_translation_workflow

    // We need the following steps to happen: content_translation doing its
    // field synchronization for untranslatable properties. After that
    // workbench_moderation needs to update both the moderation_state and
    // the status 
    unset($implementations['content_translation'], $implementations['workbench_moderation'], $implementations['content_translation_workflow']);
    $implementations['content_translation'] = FALSE;
    $implementations['workbench_moderation'] = FALSE;
    $implementations['content_translation_workflow'] = FALSE;
  }
}

/**
 * @param \Drupal\node\NodeInterface $node
 */

function content_translation_workflow_node_update(NodeInterface $node) {
  if (!empty($node->contentTranslationWorkflowAdditionalEntity) && ($forward_revision = $node->contentTranslationWorkflowAdditionalEntity) && $forward_revision instanceof NodeInterface) {
    unset($node->contentTranslationWorkflowAdditionalEntity);

    \Drupal::queue('content_translation_workflow__add_new_forward_revision')
      ->createItem($forward_revision);
  }
}

